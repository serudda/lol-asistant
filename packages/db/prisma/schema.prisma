// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum SubscriptionFrequency {
    day
    week
    month
    year
}

enum SubscriptionPlanSlug {
    free
    plus
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models

model Config {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    key       String   @unique
    value     String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("config")
}

model Account {
    id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId             String   @map("user_id") @db.Uuid
    type               String
    provider           String
    providerAccountId  String   @map("provider_account_id")
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    oauth_token_secret String?  @db.Text
    oauth_token        String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    isActive           Boolean  @default(true) @map("is_active")
    createdAt          DateTime @default(now()) @map("created_at")
    updatedAt          DateTime @updatedAt @map("updated_at")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id") @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String?
    username      String        @unique
    email         String?       @unique
    image         String        @default("")
    emailVerified DateTime?     @map("email_verified")
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    isActive      Boolean       @default(true) @map("is_active")
    createdAt     DateTime      @default(now()) @map("created_at")
    updatedAt     DateTime      @updatedAt @map("updated_at")

    @@map("users")
}

model SubscriptionPlan {
    id           String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId    String?              @map("product_id")
    variants     String[]
    slug         SubscriptionPlanSlug @unique @default(free)
    name         String
    description  String
    nodeQuota    Int                  @default(100) @map("node_quota")
    priceMonthly Float                @default(0) @map("price_monthly")
    priceYearly  Float                @default(0) @map("price_yearly")
    hrefMonthly  String               @map("href_monthly")
    hrefYearly   String               @map("href_yearly")
    features     String[]
    mostPopular  Boolean              @default(false) @map("most_popular")
    tier         Int                  @default(0)
    isActive     Boolean              @default(true) @map("is_active")
    createdAt    DateTime             @default(now()) @map("created_at")
    updatedAt    DateTime             @updatedAt @map("updated_at")
    Subscription Subscription[]

    @@map("subscription_plans")
}

model Subscription {
    id                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String                @unique @map("user_id") @db.Uuid
    subscriptionPlan   SubscriptionPlan      @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
    subscriptionPlanId String                @map("subscription_plan_id") @db.Uuid
    frequency          SubscriptionFrequency @default(month)
    isActive           Boolean               @default(true) @map("is_active")
    renewsAt           DateTime?             @map("renews_at")
    startsAt           DateTime              @default(now()) @map("starts_at")
    endsAt             DateTime?             @map("ends_at")
    createdAt          DateTime              @default(now()) @map("created_at")
    updatedAt          DateTime              @updatedAt @map("updated_at")

    @@map("subscriptions")
}

model PatchNote {
    id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    patchVersion  String
    date          DateTime
    summary       String
    embedding     Unsupported("vector")?
    isActive      Boolean                @default(true) @map("is_active")
    createdAt     DateTime               @default(now())
    updatedAt     DateTime               @updatedAt @map("updated_at")
    champCounters ChampCounter[]

    @@map("patch_notes")
}

model ChampCounter {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    source      String
    rank        Int
    champion    String
    role        String?
    winRate     Float
    matches     Int
    patchNote   PatchNote @relation(fields: [patchNoteId], references: [id])
    patchNoteId String    @unique @map("patch_note_id") @db.Uuid
    isActive    Boolean   @default(true) @map("is_active")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt @map("updated_at")

    @@map("champ_counters")
}
