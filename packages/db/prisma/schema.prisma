// --------------------------------------------------
// GENERATOR & DATASOURCE
// --------------------------------------------------
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// --------------------------------------------------
// ENUMS
// --------------------------------------------------
enum SubscriptionFrequency {
    day
    week
    month
    year
}

enum SubscriptionPlanSlug {
    free
    plus
}

enum RankTier {
    iron
    bronze
    silver
    gold
    platinum
    platinumPlus
    emerald
    emeraldPlus
    diamond
    diamondPlus
    master
    grandmaster
    challenger
}

enum LoLChampionRole {
    top
    jungle
    mid
    adc
    support
}

// --------------------------------------------------
// CORE MODELS
// --------------------------------------------------
model Config {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    key       String   @unique
    value     String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("config")
}

model Account {
    id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId             String   @map("user_id") @db.Uuid
    type               String
    provider           String
    providerAccountId  String   @map("provider_account_id")
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    oauth_token_secret String?  @db.Text
    oauth_token        String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    isActive           Boolean  @default(true) @map("is_active")
    createdAt          DateTime @default(now()) @map("created_at")
    updatedAt          DateTime @updatedAt @map("updated_at")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id") @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String?
    username      String        @unique
    email         String?       @unique
    image         String        @default("")
    emailVerified DateTime?     @map("email_verified")
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    isActive      Boolean       @default(true) @map("is_active")
    createdAt     DateTime      @default(now()) @map("created_at")
    updatedAt     DateTime      @updatedAt @map("updated_at")

    @@map("users")
}

model SubscriptionPlan {
    id           String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId    String?              @map("product_id")
    variants     String[]
    slug         SubscriptionPlanSlug @unique @default(free)
    name         String
    description  String
    nodeQuota    Int                  @default(100) @map("node_quota")
    priceMonthly Float                @default(0) @map("price_monthly")
    priceYearly  Float                @default(0) @map("price_yearly")
    hrefMonthly  String               @map("href_monthly")
    hrefYearly   String               @map("href_yearly")
    features     String[]
    mostPopular  Boolean              @default(false) @map("most_popular")
    tier         Int                  @default(0)
    isActive     Boolean              @default(true) @map("is_active")
    createdAt    DateTime             @default(now()) @map("created_at")
    updatedAt    DateTime             @updatedAt @map("updated_at")
    Subscription Subscription[]

    @@map("subscription_plans")
}

model Subscription {
    id                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    frequency          SubscriptionFrequency @default(month)
    isActive           Boolean               @default(true) @map("is_active")
    renewsAt           DateTime?             @map("renews_at")
    startsAt           DateTime              @default(now()) @map("starts_at")
    endsAt             DateTime?             @map("ends_at")
    createdAt          DateTime              @default(now()) @map("created_at")
    updatedAt          DateTime              @updatedAt @map("updated_at")
    // --- Relations ---
    user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String                @unique @map("user_id") @db.Uuid
    subscriptionPlan   SubscriptionPlan      @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
    subscriptionPlanId String                @map("subscription_plan_id") @db.Uuid
    // -----------------

    @@map("subscriptions")
}

// --------------------------------------------------
// LoL-SPECIFIC MODELS
// --------------------------------------------------

// Provider Website to get raw stats (e.g. "mobalytics", "u-gg", "op-gg")
model Source {
    id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    slug      String              @unique // "mobalytics", "u-gg", "op-gg"
    name      String
    logoUrl   String              @map("logo_url")
    baseUrl   String              @map("base_url")
    isActive  Boolean             @default(true) @map("is_active")
    stats     SourceMatchupStat[]
    createdAt DateTime            @default(now()) @map("created_at")
    updatedAt DateTime            @updatedAt @map("updated_at")

    @@map("sources")
}

// Game Patch (release by Riot Games)
model PatchNote {
    id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    patchVersion  String                 @map("patch_version") // DDragon canonical (ej. 15.10.1)
    riotPatch     String                 @map("riot_patch") // Riot canonical (ej. 25-10)
    publishedDate String                 @map("published_date")
    summary       String
    embedding     Unsupported("vector")?
    isActive      Boolean                @default(true) @map("is_active")
    createdAt     DateTime               @default(now()) @map("created_at")
    updatedAt     DateTime               @updatedAt @map("updated_at")
    matchups      ChampionMatchup[]

    @@map("patch_notes")
}

// League of Legends Champion
model Champion {
    id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String            @unique
    slug               String            @unique
    imageUrl           String?           @map("image_url")
    stats              Json?
    spells             Json?
    passive            Json?
    lastPatchVersion   String?           @map("last_patch_version")
    isActive           Boolean           @default(true) @map("is_active")
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt @map("updated_at")
    // --- Relations ---
    matchupsAsBase     ChampionMatchup[] @relation("MatchupBase")
    matchupsAsOpponent ChampionMatchup[] @relation("MatchupOpponent")
    // -----------------

    @@map("champions")
}

// Match-up between two Champions
model ChampionMatchup {
    id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    role               LoLChampionRole     @default(mid)
    weightedWinRate    Float               @map("weighted_win_rate")
    totalMatches       Int                 @map("total_matches")
    isActive           Boolean             @default(true) @map("is_active")
    createdAt          DateTime            @default(now()) @map("created_at")
    updatedAt          DateTime            @updatedAt @map("updated_at")
    rankTier           RankTier            @default(iron) @map("rank_tier")
    // --- Relations ---
    patchNote          PatchNote           @relation(fields: [patchNoteId], references: [id])
    patchNoteId        String              @map("patch_note_id") @db.Uuid
    // Selected Champion (base)
    baseChampion       Champion            @relation("MatchupBase", fields: [baseChampionId], references: [id])
    baseChampionId     String              @map("base_champion_id") @db.Uuid
    // Opponent Champion
    opponentChampion   Champion            @relation("MatchupOpponent", fields: [opponentChampionId], references: [id])
    opponentChampionId String              @map("opponent_champion_id") @db.Uuid
    sourceStats        SourceMatchupStat[]
    // -----------------

    @@unique([baseChampionId, opponentChampionId, role, rankTier, patchNoteId])
    @@map("champion_matchups")
}

// Raw stats by source
model SourceMatchupStat {
    id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    winRate            Float           @map("win_rate") // the win rate of the counter champion
    matches            Int
    sourceChampionSlug String          @map("source_champion_slug")
    sourceRankTier     String          @map("source_rank_tier")
    sourceUrl          String          @map("source_url")
    scrapedAt          DateTime        @default(now()) @map("scraped_at")
    isActive           Boolean         @default(true) @map("is_active")
    createdAt          DateTime        @default(now()) @map("created_at")
    updatedAt          DateTime        @updatedAt @map("updated_at")
    // --- Relations ---
    championMatchup    ChampionMatchup @relation(fields: [championMatchupId], references: [id], onDelete: Cascade)
    championMatchupId  String          @map("champion_matchup_id") @db.Uuid
    source             Source          @relation(fields: [sourceId], references: [id])
    sourceId           String          @map("source_id") @db.Uuid
    // -------------------

    @@unique([championMatchupId, sourceId])
    @@map("source_matchup_stats")
}
